You are absolutely right, and I apologize. My previous approach was to synthesize and create a "final" version of the prompt, but I now understand the correct goal. My role is to act as a strategist, framing all the raw information we've gathered—your documents and our hardware inventories—to create the most effective possible prompt for the next stage of your process, which is the deep research AI.

I will not alter your source material. I will present it as part of a larger, comprehensive prompt that instructs the research AI on how to process it as a whole.

Here is the revised master prompt, built with this new understanding.

***

### **Master Research & Implementation Prompt for the AI Dungeon Master Infrastructure**

**High-Level Objective:**

Your primary objective is to generate a comprehensive, step-by-step implementation plan for an AI-powered software agent (operating within VS Code) to build, configure, and deploy a microservice-based AI Dungeon Master. The plan must be derived from a holistic analysis of the entire collection of source documents and hardware inventories provided below. The final output must be a single, master document that can be fed to a VS Code agent to execute the entire project from a clean slate.

---

#### **Section 1: Source Material Inventory**

You are to treat the following documents and hardware profiles as the complete set of source material for your research.

**1.1: Strategic & Technical Documentation**

* [cite_start]**Primary Technical Specification (`AI Dungeon Master Optimization`):** This document [cite: 6084-6555] outlines the core data architecture (T-SQL), AI models (Llama 4, Stable Diffusion), cross-language API design, and includes a hardware assessment that is to be considered **outdated**.
* [cite_start]**Agent Methodology Guide (`The Developer's Arsenal`):** This document [cite: 5506-6083] provides the principles and methodologies (ReAct, Tree of Thoughts, Constitutional AI) for how the VS Code agent should be commanded, controlled, and configured.
* **Additional Documents:** Note that the final system will need to integrate with documents stored in the user's Google Drive.

**1.2: Inventoried Physical Hardware Assets**

* **Development Workstation (`HART-DESKTOP`):**
    * **OS Foundation**: Microsoft Windows 11 Pro
    * **CPU**: Intel Core i9-14900KS (24 Cores, 32 Threads)
    * **GPU**: NVIDIA GeForce RTX 4060 Ti (16 GB VRAM)
    * **RAM**: 192 GiB DDR5
    * **Storage**: 3x NVMe SSDs (2x 2TB, 1x 512GB)
    * **Network**: Intel I226-V Ethernet, Intel Wi-Fi 7 BE202

* **Network Core (`HART-ROUTER`):**
    * **Model**: Linksys E7350
    * **Firmware Foundation**: OpenWrt
    * **SoC**: MediaTek MT7621 (Dual-Core MIPS)
    * **RAM**: ~249 MB
    * **Storage**: 128 MiB NAND Flash
    * **Network**: Gigabit Ethernet, Wi-Fi 6 (AX)

* **Internet Gateway (Modem):**
    * **Model**: Arris S33r2 (**Note:** Specific hardware version and capabilities are still pending).

**1.3: Known Unknowns**

* The hardware specifications for **`HART-SERVER`** (headless Ubuntu) have not yet been inventoried.

---

#### **Section 2: Critical Analysis and Synthesis Directives**

Your primary task is to analyze and synthesize the provided source material to produce your final plan. You must adhere to the following directives:

1.  **Reconcile Hardware Discrepancy:** A critical task is to analyze the hardware specified in the strategic documents (i.e., GTX 1080 Ti, i7-6850K) and compare it against the actual inventoried hardware (`HART-DESKTOP` with RTX 4060 Ti, i9-14900KS). Your entire implementation plan must be based on the **actual, superior hardware that has been inventoried**. Re-evaluate all performance assessments, AI model deployment strategies, and hardware limitations mentioned in the source documents in light of this new information. The bottleneck identified in the source documents has been solved; your plan must reflect this.

2.  **Synthesize Strategy with Methodology:** You must synthesize the technical goals from the `AI Dungeon Master Optimization` document with the agent control methodologies from `The Developer's Arsenal` document. The final output must not only detail *what* to build (the T-SQL schema, the C#/Python APIs) but also provide the complete "Agent Constitution" (`.github/copilot-instructions.md`) and task blueprints (`.prompt.md` files) that will instruct a VS Code agent on *how* to build it.

3.  **Address Gaps and Unknowns:** Your plan must address the unknowns.
    * Propose a recommended minimum and ideal hardware profile for `HART-SERVER`, assuming its primary role will be to host the AI microservices in a containerized environment (Docker).
    * Incorporate a plan to integrate the Arris S33r2 modem.
    * Research and design a secure mechanism for the final AI system to access and process documents from the user's Google Drive via API.

---

#### **Section 3: Final Output Requirements**

The final output must be a single, master implementation document structured to be fed directly to a VS Code agent for execution. This document must contain, at a minimum:

* A **Software and Driver Manifest** for `HART-DESKTOP`.
* A **Virtualization Plan** for `HART-DESKTOP` that balances AI development needs with native gaming performance.
* A complete set of **OpenWrt configuration files** (`network`, `wireless`, `firewall`, etc.) for `HART-ROUTER` to implement all strategic goals (VLANs, security, ad blocking, etc.).
* A complete **"Agent Constitution"** (`.github/copilot-instructions.md`) for the project.
* A library of key **Task Blueprints** (`.prompt.md` files) for automating major development workflows (e.g., creating a new API endpoint, running tests).
* A **step-by-step guide** for the agent to follow, from initial setup to final deployment of the AI Dungeon Master microservices.